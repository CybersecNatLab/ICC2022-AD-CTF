#!/usr/bin/env python3

import sys
from Crypto.Cipher import AES
from service2_store2_common import Client, register_random_user, get_token, bits2bytes, dec


def decode_gate_custom(opv, g, ins):
    ins = [bytes.fromhex(x) for x in ins]
    g = [bytes.fromhex(r) for r in g]
    for i, x in enumerate(g):
        k = b"".join(ins)
        val = dec(k, x)
        if val is not None:
            return i, val.hex()


def evaluate_custom(garbled_circuit, inputs):
    enc_A, enc_B = inputs
    vals = enc_A+enc_B+[None]*len(garbled_circuit)
    true_in_A = [None]*128
    for g in garbled_circuit:
        idx, opv, ins, gate = g
        k = [vals[i] for i in ins]
        i, cur = decode_gate_custom(opv, gate, k)
        true_in_A[ins[0]] = int(i >= 2)
        assert cur is not None
        vals[idx] = cur

    return true_in_A


def exploit(ip, target_user):
    username, password = register_random_user(ip)
    token = get_token(ip, username, password)
    client = Client(ip, token)
    pub = bytes.fromhex(client.get_public(target_user))
    circ, (N, cc, xx) = client.run_function(1, target_user, b"\0"*16)
    m = [el[0] for el in cc]
    enc_B = [f'{x:010x}' for x in m]

    res = evaluate_custom(circ["gates"], (circ["enc_A"], enc_B))
    key = bits2bytes(res)
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.decrypt(pub).decode()


if __name__ == "__main__":
    team_id = sys.argv[1]
    flag_id = sys.argv[2]
    ip = f"10.60.{team_id}.1"
    print(exploit(ip, flag_id))
