#!/usr/bin/env python3

import random
import requests
import string
import re
from fastecdsa import curve, ecdsa, keys
import socketio


def randstr(n, l=False, dictionary=string.ascii_letters):
    if l:
        n = random.randint(n, l)
    return ''.join([random.choice(dictionary) for _ in range(n)])


def find_flag(text):
    return re.findall('[A-Z0-9]{31}=', text)


k256 = curve.secp256k1


class Key:
    def __init__(self, priv=None):
        if priv is None:
            priv = random.randrange(0, k256.q)
        pub = keys.get_public_key(priv, k256)
        self.priv = priv
        self.pub = pub

    def get_keys_hex(self):
        priv = f"{self.priv:064x}"
        x, y = self.pub.x, self.pub.y
        pub = f"{x:064x}{y:064x}"
        return priv, pub

    def sign(self, message):
        r, s = ecdsa.sign(message, self.priv, k256)
        return f"{r:064x}{s:064x}"


class Client:
    def __init__(self, ip, username, password, key=None):
        self.closedsea_baseurl = f"http://{ip}:3003"
        self.minter_baseurl = f"http://{ip}:3004"
        self.username = username
        self.password = password
        if key is None:
            key = Key()
        self.key = key
        self.sess = requests.Session()

    def register_user(self):
        URL = self.closedsea_baseurl + '/register'
        priv, pub = self.key.get_keys_hex()

        data = {
            'username': self.username,
            'password': self.password,
            'public_key': pub
        }
        resp = self.sess.post(URL, data=data)
        uid = re.search(r"user_id: '(.*)',", resp.text)[1]
        self.user_id = uid
        return uid

    def login_user_closedsea(self):
        URL = self.closedsea_baseurl + '/login'

        data = {
            'username': self.username,
            'password': self.password
        }
        resp = self.sess.post(URL, data=data)
        return resp

    def login_user_minter(self):
        URL = self.minter_baseurl + '/login.php'

        data = {
            'username': self.username,
            'password': self.password
        }
        resp = self.sess.post(URL, data=data)
        return resp

    def mint_nft(self, title, data, price, public):
        URL = self.minter_baseurl + '/index.php'

        data = {
            'title': title,
            'data': data,
            'price': price,
            'public': public
        }
        resp = self.sess.post(URL, data=data)
        new_id = re.search('/view/(.*)\'', resp.text)[1]
        return new_id

    def view_nft(self, nft_id):
        URL = self.closedsea_baseurl + '/view/' + nft_id

        resp = self.sess.get(URL)
        return resp

    def buy_nft(self, nft_id):
        URL = self.closedsea_baseurl + '/buy/' + nft_id

        blob = f"{{\"nft_id\":\"{nft_id}\",\"user_id\":\"{self.user_id}\"}}"
        signature = self.key.sign(blob)

        data = {
            'signature': signature
        }
        resp = self.sess.post(URL, data=data)
        return resp

    def donate_nft(self, nft_id, from_addr, to_addr):
        URL = self.closedsea_baseurl + '/donate/' + nft_id

        blob = f"{{\"nft_id\":\"{nft_id}\",\"from_addr\":\"{from_addr}\",\"to_addr\":\"{to_addr}\"}}"
        signature = self.key.sign(blob)

        data = {
            'to_addr': to_addr,
            'signature': signature
        }
        resp = self.sess.post(URL, data=data)
        return resp

    def _talk_to_socket(self, event, data):
        sio = socketio.Client()
        sio.connect(self.closedsea_baseurl)
        cb_event = sio.eio.create_event()
        resp = []
        def cb(*args):
            resp.append(args)
            cb_event.set()
        sio.on("transactions_resp", cb)
        sio.emit(event, data=data)
        cb_event.wait(timeout=5)
        sio.disconnect()
        return resp[0][0]

    def get_transactions_user(self, user_id):
        return self._talk_to_socket("transactions_for_user", user_id)
